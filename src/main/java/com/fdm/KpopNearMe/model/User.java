package com.fdm.KpopNearMe.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
/**
 * Each user is modelled as a user entity, and it is going to be stored in database.
 * 
 * @author hailieboomboom
 *
 */
@Entity
public class User {
	
	@Id
	@GeneratedValue
	private int id; // user id is generated by the system
	private String username;
	private String fName;
	private String lName;
	private String password;
	private String email;
	
	@ManyToMany(mappedBy="savedUsers")
	@LazyCollection(LazyCollectionOption.FALSE)
	private List<Place> favoritePlaces;
	
	@OneToMany(mappedBy="creator")
	@LazyCollection(LazyCollectionOption.FALSE)
	private List<Place> createdPlaces;
	
	@OneToMany(mappedBy="user")
	@LazyCollection(LazyCollectionOption.FALSE)
	private List<Review> createdReviews;
	
	  
	
	// 2 constructors from superclass and from fields respectively
	public User() {
		super();
	}

	public User(String username, String fName, String lName, String password, String email) {
		super();
		this.username = username;
		this.fName = fName;
		this.lName = lName;
		this.password = password;
		this.email = email;
		this.favoritePlaces = new ArrayList<Place>();
	}

	// getters and setters
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getfName() {
		return fName;
	}

	public void setfName(String fName) {
		this.fName = fName;
	}

	public String getlName() {
		return lName;
	}

	public void setlName(String lName) {
		this.lName = lName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	
	

	public List<Place> getFavoritePlaces() {
		return favoritePlaces;
	}

	public void setFavoritePlaces(List<Place> favoritePlaces) {
		this.favoritePlaces = favoritePlaces;
	}

	public List<Place> getCreatedPlaces() {
		return createdPlaces;
	}

	public void setCreatedPlaces(List<Place> createdPlaces) {
		this.createdPlaces = createdPlaces;
	}

	public List<Review> getCreatedReviews() {
		return createdReviews;
	}

	public void setCreatedReviews(List<Review> createdReviews) {
		this.createdReviews = createdReviews;
	}
	
	/**
	 * add a place to favoritePlaces list if it is not in the list before
	 * @param place to be added
	 */
	public void favoriteAPlace(Place place) {
		if(this.favoritePlaces == null) {
			this.favoritePlaces = new ArrayList<Place>();
		}
		if(favoritePlaces.contains(place) == false) {
			favoritePlaces.add(place);
		}

		
	}
	
	/**
	 * remove a place from favPlaces list if it is in the list
	 * @param place to be removed
	 */
	public void removeAfavoritePlace(Place place) {
		if(this.favoritePlaces.contains(place) == true) {
			this.favoritePlaces.remove(place);
		}
		
	}
	
	/**
	 * add a review to createdReviews list if it is not in the list before
	 * @param review to be added
	 */
	public void addAReview(Review review) {
		if(this.createdReviews == null) {
			this.createdReviews = new ArrayList<Review>();
		}
		if(createdReviews.contains(review) == false) {
			this.createdReviews.add(review);
		}
		
	}
	/**
	 * remove a review from createdReview list if its in the list
	 * @param review to be removed
	 */
	public void removeAReview(Review review) {
		if(createdReviews.contains(review)) {
			this.createdReviews.remove(review);
		}
	}
	


	@Override
	public String toString() {
		return "User [id=" + id + ", username=" + username + ", fName=" + fName + ", lName=" + lName + ", password="
				+ password + ", email=" + email + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(email, fName, id, lName, password, username);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(email, other.email) && Objects.equals(fName, other.fName) && id == other.id
				&& Objects.equals(lName, other.lName) && Objects.equals(password, other.password)
				&& Objects.equals(username, other.username);
	}
	
	
	

}
